import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Define graph nodes and edges
nodes = ['A', 'B', 'C', 'D', 'E']
edges = [('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('D', 'E')]

# Create the graph
G = nx.Graph()
G.add_nodes_from(nodes)
G.add_edges_from(edges)

# Generate adjacency matrix (A)
A = nx.adjacency_matrix(G, nodelist=nodes).todense()

# Generate degree matrix (D)
D = np.diag(np.sum(A, axis=1))

# Generate feature matrix (H) - random example features
H = np.random.rand(len(nodes), 3)  # 3 features per node

# Plot the graph
plt.figure(figsize=(12, 4))

plt.subplot(1, 4, 1)
pos = nx.spring_layout(G, seed=42)
nx.draw(G, pos, with_labels=True, node_color="lightblue", edge_color="gray", node_size=1000, font_size=12)
plt.title("Graph Structure")

# Plot adjacency matrix
plt.subplot(1, 4, 2)
plt.imshow(A, cmap="Blues", interpolation="nearest")
plt.xticks(range(len(nodes)), nodes)
plt.yticks(range(len(nodes)), nodes)
plt.title("Adjacency Matrix (A)")
for i in range(len(nodes)):
    for j in range(len(nodes)):
        plt.text(j, i, f"{A[i, j]:.0f}", ha='center', va='center', color='black')

# Plot degree matrix
plt.subplot(1, 4, 3)
plt.imshow(D, cmap="Oranges", interpolation="nearest")
plt.xticks(range(len(nodes)), nodes)
plt.yticks(range(len(nodes)), nodes)
plt.title("Degree Matrix (D)")
for i in range(len(nodes)):
    for j in range(len(nodes)):
        plt.text(j, i, f"{D[i, j]:.0f}", ha='center', va='center', color='black')

# Plot feature matrix
plt.subplot(1, 4, 4)
plt.imshow(H, cmap="Greens", interpolation="nearest")
plt.xticks(range(H.shape[1]), [f"F{i+1}" for i in range(H.shape[1])])
plt.yticks(range(len(nodes)), nodes)
plt.title("Feature Matrix (H)")
for i in range(len(nodes)):
    for j in range(H.shape[1]):
        plt.text(j, i, f"{H[i, j]:.2f}", ha='center', va='center', color='black')

plt.tight_layout()
plt.show()
