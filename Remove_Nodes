import torch
from torch_geometric.data import Data

def remove_nodes(data, nodes_to_remove):
    """
    Remove specified nodes from a PyTorch Geometric Data object and update all related attributes.
    
    Args:
        data: PyTorch Geometric Data object
        nodes_to_remove: List or tensor of node indices to remove
    
    Returns:
        Updated Data object with nodes removed
    """
    # Convert nodes_to_remove to a set for faster lookup
    if not isinstance(nodes_to_remove, set):
        nodes_to_remove = set(nodes_to_remove.tolist() if torch.is_tensor(nodes_to_remove) else nodes_to_remove)
    
    # Create a mask for nodes to keep
    keep_nodes = torch.ones(data.num_nodes, dtype=torch.bool)
    keep_nodes[list(nodes_to_remove)] = False
    
    # Create a mapping from old to new indices
    new_indices = torch.cumsum(keep_nodes, dim=0) - 1
    
    # Filter edges: keep only edges where both source and target nodes are kept
    edge_mask = torch.ones(data.edge_index.size(1), dtype=torch.bool)
    for i in range(data.edge_index.size(1)):
        src, dst = data.edge_index[:, i]
        if src.item() in nodes_to_remove or dst.item() in nodes_to_remove:
            edge_mask[i] = False
    
    # Create new data object with filtered nodes and edges
    new_data = Data()
    
    # Update node features
    if hasattr(data, 'x') and data.x is not None:
        new_data.x = data.x[keep_nodes]
    
    # Update node labels
    if hasattr(data, 'y') and data.y is not None:
        new_data.y = data.y[keep_nodes]
    
    # Update edge indices and attributes
    if hasattr(data, 'edge_index') and data.edge_index is not None:
        # Filter edges
        new_data.edge_index = data.edge_index[:, edge_mask]
        # Update indices
        for i in range(new_data.edge_index.size(1)):
            new_data.edge_index[0, i] = new_indices[new_data.edge_index[0, i]]
            new_data.edge_index[1, i] = new_indices[new_data.edge_index[1, i]]
    
    # Update edge attributes
    if hasattr(data, 'edge_attr') and data.edge_attr is not None:
        new_data.edge_attr = data.edge_attr[edge_mask]
    
    # Preserve other attributes
    new_data.num_classes = data.num_classes
    new_data.num_features = data.num_features

    return new_data
